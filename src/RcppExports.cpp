// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rinvGauss
double rinvGauss(double nu, double lambda);
RcppExport SEXP _h2D2_rinvGauss(SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvGauss(nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// propose_lognormal
double propose_lognormal(double x, double stepsize);
RcppExport SEXP _h2D2_propose_lognormal(SEXP xSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(propose_lognormal(x, stepsize));
    return rcpp_result_gen;
END_RCPP
}
// h2D2_sampling
void h2D2_sampling(S4 h2D2, const Eigen::SparseMatrix<double> W, const double N, const Eigen::VectorXd NbetaHat, int mcmc_n, int thin, double stepsize, unsigned int seed);
RcppExport SEXP _h2D2_h2D2_sampling(SEXP h2D2SEXP, SEXP WSEXP, SEXP NSEXP, SEXP NbetaHatSEXP, SEXP mcmc_nSEXP, SEXP thinSEXP, SEXP stepsizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type h2D2(h2D2SEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type NbetaHat(NbetaHatSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_n(mcmc_nSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    h2D2_sampling(h2D2, W, N, NbetaHat, mcmc_n, thin, stepsize, seed);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_h2D2_rinvGauss", (DL_FUNC) &_h2D2_rinvGauss, 2},
    {"_h2D2_propose_lognormal", (DL_FUNC) &_h2D2_propose_lognormal, 2},
    {"_h2D2_h2D2_sampling", (DL_FUNC) &_h2D2_h2D2_sampling, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_h2D2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
