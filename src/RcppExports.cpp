// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rinvGauss
double rinvGauss(double mu, double lambda);
RcppExport SEXP _h2D2_rinvGauss(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvGauss(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// h2D2_pretrain
List h2D2_pretrain(S4 h2D2, List sample, const Eigen::VectorXd dW, const Eigen::SparseMatrix<double> W, const Eigen::VectorXd mu, const Eigen::SparseMatrix<double> LD_pairs, const unsigned int n_chain, const NumericVector temp, const unsigned int pre_mcmc_n, const unsigned int pre_burn_in, const double pre_p, const unsigned int pre_maxiter, const unsigned int pre_miniter, const double stepsize, const unsigned int seed);
RcppExport SEXP _h2D2_h2D2_pretrain(SEXP h2D2SEXP, SEXP sampleSEXP, SEXP dWSEXP, SEXP WSEXP, SEXP muSEXP, SEXP LD_pairsSEXP, SEXP n_chainSEXP, SEXP tempSEXP, SEXP pre_mcmc_nSEXP, SEXP pre_burn_inSEXP, SEXP pre_pSEXP, SEXP pre_maxiterSEXP, SEXP pre_miniterSEXP, SEXP stepsizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type h2D2(h2D2SEXP);
    Rcpp::traits::input_parameter< List >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type dW(dWSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type LD_pairs(LD_pairsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_chain(n_chainSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type pre_mcmc_n(pre_mcmc_nSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type pre_burn_in(pre_burn_inSEXP);
    Rcpp::traits::input_parameter< const double >::type pre_p(pre_pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type pre_maxiter(pre_maxiterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type pre_miniter(pre_miniterSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(h2D2_pretrain(h2D2, sample, dW, W, mu, LD_pairs, n_chain, temp, pre_mcmc_n, pre_burn_in, pre_p, pre_maxiter, pre_miniter, stepsize, seed));
    return rcpp_result_gen;
END_RCPP
}
// h2D2_sampling
List h2D2_sampling(S4 h2D2, List sample, const Eigen::VectorXd dW, const Eigen::SparseMatrix<double> W, const Eigen::VectorXd mu, const Eigen::SparseMatrix<double> LD_pairs, const unsigned int n_chain, const NumericVector temp, const unsigned int mcmc_n, const unsigned int thin, const double stepsize, const unsigned int seed);
RcppExport SEXP _h2D2_h2D2_sampling(SEXP h2D2SEXP, SEXP sampleSEXP, SEXP dWSEXP, SEXP WSEXP, SEXP muSEXP, SEXP LD_pairsSEXP, SEXP n_chainSEXP, SEXP tempSEXP, SEXP mcmc_nSEXP, SEXP thinSEXP, SEXP stepsizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type h2D2(h2D2SEXP);
    Rcpp::traits::input_parameter< List >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type dW(dWSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double> >::type LD_pairs(LD_pairsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_chain(n_chainSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type mcmc_n(mcmc_nSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(h2D2_sampling(h2D2, sample, dW, W, mu, LD_pairs, n_chain, temp, mcmc_n, thin, stepsize, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_h2D2_rinvGauss", (DL_FUNC) &_h2D2_rinvGauss, 2},
    {"_h2D2_h2D2_pretrain", (DL_FUNC) &_h2D2_h2D2_pretrain, 15},
    {"_h2D2_h2D2_sampling", (DL_FUNC) &_h2D2_h2D2_sampling, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_h2D2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
